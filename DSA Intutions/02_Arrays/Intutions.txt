
########################## Arrays #############################################
# some tips

1) use int max = INTEGER.min and int min = INTEGER.max

2) swap elements

    int temp = a
    a = b
    b = temp


4) Order Agnostic Binary Search

    - check if array is asc or desc
        bool isAsc = arr[start]<arr[end]


5) Find ceil and floor element
    # ceil element -> The smallest element in array which is greater than or equal to target
    # floor element -> The largest element in array which is smaller than or equal to target
       [1,4,6,8,11,16]
       target -> 7 or 8
       floor -> 8  or 8  -> return end
       ceil -> 11  or 8  -> return start

       here in BS we use while(start<=end) so
            end = start - 1 = arr.len - 1 (if ele not found)
            start = end + 1 = arr.len (if ele not found)

       In case of circular array if target is beyond last index return the first element
       so, we can use return[start % arr.len]
       so if start < arr.len it will return the index which is start
       if ele not found i.e. start = arr.len so arr.len % arr.len = 0 i.e first element



6) First and last index of occurrence

    First elem index = BS(arr,target,true) -> returns very first index
    last elem index = BS(arr,target,false) -> returns very last index

    so in BS if you find answer instead of returning it put it in variable and perform BS again until start<end



7) Infinite sorted array
    Here the size of array is unknown so we cant do end = arr.len-1
    create chunks start with 2 (start = 0, end = 1)
    increase exponentially until target < end element
            new_start = end + 1
            end = end + (end - start + 1)*2
            start = new_start
    then perform binary search


8) Peak element in mountain array
    [1,2,3,5,6,4,3,2] here 6 is peak element

    - check the condition for peak will be peak > peak-1 and peak > peak+1
    - if mid > mid+1 then are in descending part of array so end = mid as peak will be before mid or can be mid so -> end = mid
    - if mid< mid+1 then in ascending part so start = mid+1
    - then return start or end as both will be same (start<end)


9) Search in mountain array
    - find peak element
    - search in asc and desc part and check peak == elem



10) Search in rotated sorted array

    - Find pivot i.e. the largest element in array
    - search on both side of pivot

    [4,5,6,1,2,3] -> pivot -> 6
    - so, condition for pivot is that 6,1 is only descending part of array so search for that
    - so, it satisfies two conditions mid > mid + 1 (for 6 here) and mid < mid - 1 (for 1 here) so if such elem found return it
    - if start is equal or smaller than mid then answer will be ahead so start = mid + 1
    - if start is equal or greater than mid then answer will lie behind so end = mid - 1

    - now search if pivot is answer if not do BS in array
    - target is greater than start, so it lies btw start and pivot as pivot is the greatest
        BS(arr,target,0 or start,pivot-1)
    - else target is less than start then it will lie btw pivot and end
        BS(arr,target,pivot+1,end)


11) Rotation count
    - pivot index + 1

12) Duplicate element in rotated array

    - so, condition for pivot is that 6,1 is only descending part of array so search for that
    - so, it satisfies two conditions mid > mid + 1 (for 6 here) and mid < mid - 1 (for 1 here) so if such elem found return it
    - check for duplicate
        - if start = end = mid this condition will break if elements are duplicated so check if this is case
        - if yes check that start and end is pivot if yes return the pivot else skip the elem
                    if(start>start+1){
                        return start
                    }
                    start++
                    if(end < end-1){
                        return end-1
                    }
                    end--

    - if start is equal or smaller than mid then answer will be ahead so start = mid + 1
    - if start is equal or greater than mid then answer will lie behind so end = mid - 1





13) Split the largest sum

    // Here answer lies between the largest element in array and sum of array
    // limit given for splitting an array is m and piece is our defined count
    // the use BS
    // here mid is the sum estimated
    // use loop for each no in array and if sum = mid then add the piece count
    // if pieces is less or same then mid is high so reduce mid so as mid can be answer end = mid
    // else if pieces are more so mid is low so increase mid here so start = mid + 1


14) Binary Search in Row-col sorted matrix

    - start from the last end coz this is sorted matrix at both row and col
    - start with row = 0 and col = arr.length-1;

    - while row < arr.length && col >= 0 check if elem at that row and col is equal to target
    - skip the col if element is greater than starting element of col i.e. arr[0][arr.len-1] , col--
    - else search in the col down the row i.e. row++

15) Binary Search in sorted matrix

    - here the elements are sorted in row wise manner so, we can make it 1D array and sort it
    - First take no of rows and cols
        int rows = arr.length;
        int cols = arr[0].length;

    - then rowStart and rowEnd variables and colMid we can also take rowMid
    int rowStart = 0;
    int rowEnd = rows - 1;
    int colMid = cols  / 2;

    - run while loop in colMid column (rowStart < (rowEnd - 1)) until two rows are remaining, loop break point --> rowStart == rowEnd - 1 -> rowStart = 0  rowEnd = 1
    - return if target is found
    - if target is greater or smaller than arr[mid][colMid] then change rowStart or rowEnd to mid respectively
    - mid+1 and mid-1 will equate to each other so only mid and can be on same row

    - now we have only two rows left
        - check for elements in midCol i.e. arr[rowStart][colMid] and arr[rowEnd][colMid]
        - check for 1st half  -> smaller than target then
             return BS(arr, target, rowStart, 0, colMid-1);
        - 2nd half -> larger than target and smaller than end of that col
             return BS(arr, target, rowStart , colMid + 1, cols - 1);
        - similarly for 3rd and 4th half

17) Bubble sort

    - iterate over the whole array and make sure for each step, max item will come at  the last index
    - swap the element if greater than next element and next loop reduce the iteration by reducing the length of array i.e. skip the last index as it is the greatest
    - if swap doesn't occur then swap


18) Selection Sort

    - iterate over an array and find max element and swap with last index
    - reduce the size of iterable array and change last index accordingly


19) Insertion sort

    - iterate over array size -1 as we are running next loop j = i+1 and i<= arr.len-2 coz j=i+1 and if i = 0 array is sorted up to index 1, so we need only n-1 indices
    - j keeps checking to left, and strictly it must be less than 0 and starts with j = i+1 and keeps decreasing
    - check if left side is sorted if not swap the elements and if sorted then break it as we have partially sorted

    # why use insertion sort
    - stable
    - works good if array is partially sorted
    - takes part in hybrid sorting algo with quick or merge sort

20) Cyclic sort

    # if in question it is given from 0,1 to n use cyclic sort

    - in while loop check if element is at correct position if not swap do it until element is not at correct position
    - else increment i

21) Missing No

    - perform cyclic sort
    - check that each index is at correct position if not return it as ans

22) Duplicate elements

    - In while loop check if element is at correct index if yes increment i++ i.e. skip the index
    - if not check that correct index has correct element if not swap and if yes then return that duplicate elem

23) Mismatch pair

    - create an array to store mismatch pair
    - perform the cyclic sort
    - check for wrong index and return pair of index and element

24) First Missing Positive


    - Cyclic sort the array and check for positive input
    - return the first positive element
    - if element is last return array length + 1 in case of arr[i] + 1 and array length only in case of arr[i]
